// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using diet_server_api.Models;

namespace diet_server_api.Migrations
{
    [DbContext(typeof(mdzcojxmContext))]
    [Migration("20220202195321_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("btree_gin")
                .HasPostgresExtension("btree_gist")
                .HasPostgresExtension("citext")
                .HasPostgresExtension("cube")
                .HasPostgresExtension("dblink")
                .HasPostgresExtension("dict_int")
                .HasPostgresExtension("dict_xsyn")
                .HasPostgresExtension("earthdistance")
                .HasPostgresExtension("fuzzystrmatch")
                .HasPostgresExtension("hstore")
                .HasPostgresExtension("intarray")
                .HasPostgresExtension("ltree")
                .HasPostgresExtension("pg_stat_statements")
                .HasPostgresExtension("pg_trgm")
                .HasPostgresExtension("pgcrypto")
                .HasPostgresExtension("pgrowlocks")
                .HasPostgresExtension("pgstattuple")
                .HasPostgresExtension("tablefunc")
                .HasPostgresExtension("unaccent")
                .HasPostgresExtension("uuid-ossp")
                .HasPostgresExtension("xml2")
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("diet_server_api.Models.Day", b =>
                {
                    b.Property<int>("Idday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idday")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Daynumber")
                        .HasColumnType("integer")
                        .HasColumnName("daynumber");

                    b.Property<int>("Dietiddiet")
                        .HasColumnType("integer")
                        .HasColumnName("dietiddiet");

                    b.Property<string>("Patientreport")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("patientreport");

                    b.HasKey("Idday")
                        .HasName("day_pk");

                    b.HasIndex("Dietiddiet");

                    b.ToTable("day");
                });

            modelBuilder.Entity("diet_server_api.Models.Diet", b =>
                {
                    b.Property<int>("Iddiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iddiet")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Changesdate")
                        .HasColumnType("date")
                        .HasColumnName("changesdate");

                    b.Property<decimal>("Dailymeals")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("dailymeals");

                    b.Property<DateTime>("Datefrom")
                        .HasColumnType("date")
                        .HasColumnName("datefrom");

                    b.Property<DateTime>("Dateto")
                        .HasColumnType("date")
                        .HasColumnName("dateto");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("character varying(15000)")
                        .HasColumnName("description");

                    b.Property<int>("Idpatient")
                        .HasColumnType("integer")
                        .HasColumnName("idpatient");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<decimal>("Protein")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("protein");

                    b.HasKey("Iddiet")
                        .HasName("diet_pk");

                    b.HasIndex("Idpatient");

                    b.ToTable("diet");
                });

            modelBuilder.Entity("diet_server_api.Models.Dietsuppliment", b =>
                {
                    b.Property<int>("Iddietsuppliment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iddietsuppliment")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int>("Iddiet")
                        .HasColumnType("integer")
                        .HasColumnName("iddiet");

                    b.Property<int>("Idsuppliment")
                        .HasColumnType("integer")
                        .HasColumnName("idsuppliment");

                    b.HasKey("Iddietsuppliment")
                        .HasName("dietsuppliment_pk");

                    b.HasIndex("Iddiet");

                    b.HasIndex("Idsuppliment");

                    b.ToTable("dietsuppliment");
                });

            modelBuilder.Entity("diet_server_api.Models.Disease", b =>
                {
                    b.Property<int>("Iddisease")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iddisease")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("character varying(15000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<string>("Recomendation")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("character varying(15000)")
                        .HasColumnName("recomendation");

                    b.HasKey("Iddisease")
                        .HasName("diseases_pk");

                    b.ToTable("diseases");
                });

            modelBuilder.Entity("diet_server_api.Models.DiseasePatient", b =>
                {
                    b.Property<int>("IddiseasePatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iddisease_patient")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Dateofcure")
                        .HasColumnType("date")
                        .HasColumnName("dateofcure");

                    b.Property<DateTime?>("Dateofdiagnosis")
                        .HasColumnType("date")
                        .HasColumnName("dateofdiagnosis");

                    b.Property<int>("Iddisease")
                        .HasColumnType("integer")
                        .HasColumnName("iddisease");

                    b.Property<int>("Idpatient")
                        .HasColumnType("integer")
                        .HasColumnName("idpatient");

                    b.HasKey("IddiseasePatient")
                        .HasName("disease_patient_pk");

                    b.HasIndex("Iddisease");

                    b.HasIndex("Idpatient");

                    b.ToTable("disease_patient");
                });

            modelBuilder.Entity("diet_server_api.Models.Doctor", b =>
                {
                    b.Property<int>("Iduser")
                        .HasColumnType("integer")
                        .HasColumnName("iduser");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("office");

                    b.HasKey("Iduser")
                        .HasName("doctor_pk");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("diet_server_api.Models.Individualrecipe", b =>
                {
                    b.Property<int>("Idindividualrecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idindividualrecipe")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Idmealtake")
                        .HasColumnType("integer")
                        .HasColumnName("idmealtake");

                    b.Property<int>("Idrecipe")
                        .HasColumnType("integer")
                        .HasColumnName("idrecipe");

                    b.HasKey("Idindividualrecipe")
                        .HasName("individualrecipe_pk");

                    b.HasIndex("Idmealtake");

                    b.HasIndex("Idrecipe");

                    b.ToTable("individualrecipe");
                });

            modelBuilder.Entity("diet_server_api.Models.Meal", b =>
                {
                    b.Property<int>("Idmeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idmeal")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CookingUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cooking_url");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("character varying(15000)")
                        .HasColumnName("description");

                    b.Property<string>("Nameofmeal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameofmeal");

                    b.HasKey("Idmeal")
                        .HasName("meal_pk");

                    b.ToTable("meal");
                });

            modelBuilder.Entity("diet_server_api.Models.Mealsbeforediet", b =>
                {
                    b.Property<int>("Idmeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idmeal")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Foodtoeat")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("foodtoeat");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("hour");

                    b.Property<int>("Idquestionary")
                        .HasColumnType("integer")
                        .HasColumnName("idquestionary");

                    b.Property<int>("Mealnumber")
                        .HasColumnType("integer")
                        .HasColumnName("mealnumber");

                    b.HasKey("Idmeal")
                        .HasName("mealsbeforediet_pk");

                    b.HasIndex("Idquestionary");

                    b.ToTable("mealsbeforediet");
                });

            modelBuilder.Entity("diet_server_api.Models.Mealtake", b =>
                {
                    b.Property<int>("Idmealtake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idmealtake")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Idday")
                        .HasColumnType("integer")
                        .HasColumnName("idday");

                    b.Property<bool?>("Isfollowed")
                        .HasColumnType("boolean")
                        .HasColumnName("isfollowed");

                    b.Property<decimal>("Proportion")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("proportion");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("time");

                    b.HasKey("Idmealtake")
                        .HasName("mealtake_pk");

                    b.HasIndex("Idday");

                    b.ToTable("mealtake");
                });

            modelBuilder.Entity("diet_server_api.Models.Measurement", b =>
                {
                    b.Property<int>("Idmeasurement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idmeasurement")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Bicepscircumference")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("bicepscircumference");

                    b.Property<decimal?>("Calfcircumference")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("calfcircumference");

                    b.Property<decimal?>("Chestcircumference")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("chestcircumference");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Height")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("height");

                    b.Property<decimal>("Hipcircumference")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("hipcircumference");

                    b.Property<int>("Idpatient")
                        .HasColumnType("integer")
                        .HasColumnName("idpatient");

                    b.Property<decimal?>("Thighcircumference")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("thighcircumference");

                    b.Property<decimal>("Waistcircumference")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("waistcircumference");

                    b.Property<decimal?>("Waistlowercircumference")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("waistlowercircumference");

                    b.Property<decimal>("Weight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("weight");

                    b.Property<string>("Whomeasured")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("whomeasured");

                    b.HasKey("Idmeasurement")
                        .HasName("measurements_pk");

                    b.HasIndex("Idpatient");

                    b.ToTable("measurements");
                });

            modelBuilder.Entity("diet_server_api.Models.Note", b =>
                {
                    b.Property<int>("Idnote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idnote")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Dateofnote")
                        .HasColumnType("date")
                        .HasColumnName("dateofnote");

                    b.Property<int>("Iddoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iddoctor");

                    b.Property<int>("Idpatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idpatient");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message");

                    b.HasKey("Idnote")
                        .HasName("note_pk");

                    b.HasIndex("Iddoctor");

                    b.HasIndex("Idpatient");

                    b.ToTable("note");
                });

            modelBuilder.Entity("diet_server_api.Models.Parameter", b =>
                {
                    b.Property<int>("Idparameter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idparameter")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Measureunit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("measureunit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Idparameter")
                        .HasName("parameter_pk");

                    b.ToTable("parameter");
                });

            modelBuilder.Entity("diet_server_api.Models.Patient", b =>
                {
                    b.Property<int>("Iduser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iduser");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<decimal?>("Correctedvalue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("correctedvalue");

                    b.Property<decimal?>("Cpm")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cpm");

                    b.Property<string>("Flatnumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("flatnumber");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("gender");

                    b.Property<bool>("Ispending")
                        .HasColumnType("boolean")
                        .HasColumnName("ispending");

                    b.Property<decimal?>("Pal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("pal");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street");

                    b.Property<string>("Streetnumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("streetnumber");

                    b.HasKey("Iduser")
                        .HasName("patient_pk");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("diet_server_api.Models.PgStatStatement", b =>
                {
                    b.Property<double?>("BlkReadTime")
                        .HasColumnType("double precision")
                        .HasColumnName("blk_read_time");

                    b.Property<double?>("BlkWriteTime")
                        .HasColumnType("double precision")
                        .HasColumnName("blk_write_time");

                    b.Property<long?>("Calls")
                        .HasColumnType("bigint")
                        .HasColumnName("calls");

                    b.Property<uint?>("Dbid")
                        .HasColumnType("oid")
                        .HasColumnName("dbid");

                    b.Property<long?>("LocalBlksDirtied")
                        .HasColumnType("bigint")
                        .HasColumnName("local_blks_dirtied");

                    b.Property<long?>("LocalBlksHit")
                        .HasColumnType("bigint")
                        .HasColumnName("local_blks_hit");

                    b.Property<long?>("LocalBlksRead")
                        .HasColumnType("bigint")
                        .HasColumnName("local_blks_read");

                    b.Property<long?>("LocalBlksWritten")
                        .HasColumnType("bigint")
                        .HasColumnName("local_blks_written");

                    b.Property<double?>("MaxTime")
                        .HasColumnType("double precision")
                        .HasColumnName("max_time");

                    b.Property<double?>("MeanTime")
                        .HasColumnType("double precision")
                        .HasColumnName("mean_time");

                    b.Property<double?>("MinTime")
                        .HasColumnType("double precision")
                        .HasColumnName("min_time");

                    b.Property<string>("Query")
                        .HasColumnType("text")
                        .HasColumnName("query");

                    b.Property<long?>("Queryid")
                        .HasColumnType("bigint")
                        .HasColumnName("queryid");

                    b.Property<long?>("Rows")
                        .HasColumnType("bigint")
                        .HasColumnName("rows");

                    b.Property<long?>("SharedBlksDirtied")
                        .HasColumnType("bigint")
                        .HasColumnName("shared_blks_dirtied");

                    b.Property<long?>("SharedBlksHit")
                        .HasColumnType("bigint")
                        .HasColumnName("shared_blks_hit");

                    b.Property<long?>("SharedBlksRead")
                        .HasColumnType("bigint")
                        .HasColumnName("shared_blks_read");

                    b.Property<long?>("SharedBlksWritten")
                        .HasColumnType("bigint")
                        .HasColumnName("shared_blks_written");

                    b.Property<double?>("StddevTime")
                        .HasColumnType("double precision")
                        .HasColumnName("stddev_time");

                    b.Property<long?>("TempBlksRead")
                        .HasColumnType("bigint")
                        .HasColumnName("temp_blks_read");

                    b.Property<long?>("TempBlksWritten")
                        .HasColumnType("bigint")
                        .HasColumnName("temp_blks_written");

                    b.Property<double?>("TotalTime")
                        .HasColumnType("double precision")
                        .HasColumnName("total_time");

                    b.Property<uint?>("Userid")
                        .HasColumnType("oid")
                        .HasColumnName("userid");

                    b.ToTable("pg_stat_statements");
                });

            modelBuilder.Entity("diet_server_api.Models.Product", b =>
                {
                    b.Property<int>("Idproduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idproduct")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Homemeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("homemeasure");

                    b.Property<decimal>("Homemeasuresize")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("homemeasuresize");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<decimal>("Size")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("size");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.HasKey("Idproduct")
                        .HasName("product_pk");

                    b.ToTable("product");
                });

            modelBuilder.Entity("diet_server_api.Models.ProductParameter", b =>
                {
                    b.Property<int>("IdproductParameter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idproduct_parameter")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int>("Idparameter")
                        .HasColumnType("integer")
                        .HasColumnName("idparameter");

                    b.Property<int>("Idproduct")
                        .HasColumnType("integer")
                        .HasColumnName("idproduct");

                    b.HasKey("IdproductParameter")
                        .HasName("product_parameter_pk");

                    b.HasIndex("Idparameter");

                    b.HasIndex("Idproduct");

                    b.ToTable("product_parameter");
                });

            modelBuilder.Entity("diet_server_api.Models.Questionnaire", b =>
                {
                    b.Property<int>("Idquestionary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idquestionary")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Afternoonmeal")
                        .HasColumnType("boolean")
                        .HasColumnName("afternoonmeal");

                    b.Property<string>("Alcoholinfo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("alcoholinfo");

                    b.Property<string>("Alergieproducts")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("alergieproducts");

                    b.Property<decimal>("Avgsleep")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("avgsleep");

                    b.Property<string>("Betweenmealsfood")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("betweenmealsfood");

                    b.Property<bool>("Breakfast")
                        .HasColumnType("boolean")
                        .HasColumnName("breakfast");

                    b.Property<int>("Cigs")
                        .HasColumnType("integer")
                        .HasColumnName("cigs");

                    b.Property<int>("Coffeeglasses")
                        .HasColumnType("integer")
                        .HasColumnName("coffeeglasses");

                    b.Property<DateTime>("Databadania")
                        .HasColumnType("date")
                        .HasColumnName("databadania");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("boolean")
                        .HasColumnName("diabetes");

                    b.Property<bool>("Dinner")
                        .HasColumnType("boolean")
                        .HasColumnName("dinner");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("education");

                    b.Property<int>("Energydrinkglasses")
                        .HasColumnType("integer")
                        .HasColumnName("energydrinkglasses");

                    b.Property<decimal>("Excercisingperday")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("excercisingperday");

                    b.Property<decimal>("Exercisingperweek")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("exercisingperweek");

                    b.Property<string>("Favfooditems")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("favfooditems");

                    b.Property<string>("Hypersensitivityproducts")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("hypersensitivityproducts");

                    b.Property<bool>("Hypertension")
                        .HasColumnType("boolean")
                        .HasColumnName("hypertension");

                    b.Property<bool>("Hypothyroidism")
                        .HasColumnType("boolean")
                        .HasColumnName("hypothyroidism");

                    b.Property<int>("Idpatient")
                        .HasColumnType("integer")
                        .HasColumnName("idpatient");

                    b.Property<bool>("Insulinresistance")
                        .HasColumnType("boolean")
                        .HasColumnName("insulinresistance");

                    b.Property<bool>("Intestinaldiseases")
                        .HasColumnType("boolean")
                        .HasColumnName("intestinaldiseases");

                    b.Property<int>("Juiceglasses")
                        .HasColumnType("integer")
                        .HasColumnName("juiceglasses");

                    b.Property<bool>("Lunch")
                        .HasColumnType("boolean")
                        .HasColumnName("lunch");

                    b.Property<string>("Mainproblems")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("mainproblems");

                    b.Property<string>("Medications")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("medications");

                    b.Property<string>("Notfavfooditems")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("notfavfooditems");

                    b.Property<string>("Otherdiseases")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("otherdiseases");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("profession");

                    b.Property<bool>("Regularwalk")
                        .HasColumnType("boolean")
                        .HasColumnName("regularwalk");

                    b.Property<bool>("Secondbreakfast")
                        .HasColumnType("boolean")
                        .HasColumnName("secondbreakfast");

                    b.Property<string>("Sporttypes")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("sporttypes");

                    b.Property<string>("Supplementstaken")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("supplementstaken");

                    b.Property<int>("Teaglasses")
                        .HasColumnType("integer")
                        .HasColumnName("teaglasses");

                    b.Property<string>("Usuallygotosleep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("usuallygotosleep");

                    b.Property<string>("Usuallywakeup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("usuallywakeup");

                    b.Property<int>("Waterglasses")
                        .HasColumnType("integer")
                        .HasColumnName("waterglasses");

                    b.HasKey("Idquestionary")
                        .HasName("questionnaire_pk");

                    b.HasIndex("Idpatient");

                    b.ToTable("questionnaire");
                });

            modelBuilder.Entity("diet_server_api.Models.Recipe", b =>
                {
                    b.Property<int>("Idrecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idrecipe")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int>("Idmeal")
                        .HasColumnType("integer")
                        .HasColumnName("idmeal");

                    b.Property<int>("Idproduct")
                        .HasColumnType("integer")
                        .HasColumnName("idproduct");

                    b.HasKey("Idrecipe")
                        .HasName("recipe_pk");

                    b.HasIndex("Idmeal");

                    b.HasIndex("Idproduct");

                    b.ToTable("recipe");
                });

            modelBuilder.Entity("diet_server_api.Models.Supplement", b =>
                {
                    b.Property<int>("Idsuppliment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idsuppliment")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Idsuppliment")
                        .HasName("supplement_pk");

                    b.ToTable("supplement");
                });

            modelBuilder.Entity("diet_server_api.Models.TempUser", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Uniquekey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("uniquekey");

                    b.HasKey("Email")
                        .HasName("temp_user_pk");

                    b.ToTable("temp_user");
                });

            modelBuilder.Entity("diet_server_api.Models.User", b =>
                {
                    b.Property<int>("Iduser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iduser")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Dateofbirth")
                        .HasColumnType("date")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("firstname");

                    b.Property<bool>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("pesel");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("Refreshtoken")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("refreshtoken");

                    b.Property<DateTime?>("Refreshtokenexp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("refreshtokenexp");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("salt");

                    b.HasKey("Iduser")
                        .HasName("users_pk");

                    b.ToTable("users");
                });

            modelBuilder.Entity("diet_server_api.Models.Visit", b =>
                {
                    b.Property<int>("Idvisit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idvisit")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<int>("Iddoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iddoctor");

                    b.Property<int>("Idpatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idpatient");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.HasKey("Idvisit")
                        .HasName("visit_pk");

                    b.HasIndex("Iddoctor");

                    b.HasIndex("Idpatient");

                    b.ToTable("visit");
                });

            modelBuilder.Entity("diet_server_api.Models.Day", b =>
                {
                    b.HasOne("diet_server_api.Models.Diet", "DietiddietNavigation")
                        .WithMany("Days")
                        .HasForeignKey("Dietiddiet")
                        .HasConstraintName("day_diet")
                        .IsRequired();

                    b.Navigation("DietiddietNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Diet", b =>
                {
                    b.HasOne("diet_server_api.Models.Patient", "IdpatientNavigation")
                        .WithMany("Diets")
                        .HasForeignKey("Idpatient")
                        .HasConstraintName("diet_patient")
                        .IsRequired();

                    b.Navigation("IdpatientNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Dietsuppliment", b =>
                {
                    b.HasOne("diet_server_api.Models.Diet", "IddietNavigation")
                        .WithMany("Dietsuppliments")
                        .HasForeignKey("Iddiet")
                        .HasConstraintName("diet_suppliment_diet")
                        .IsRequired();

                    b.HasOne("diet_server_api.Models.Supplement", "IdsupplimentNavigation")
                        .WithMany("Dietsuppliments")
                        .HasForeignKey("Idsuppliment")
                        .HasConstraintName("diet_suppliment_suppliment")
                        .IsRequired();

                    b.Navigation("IddietNavigation");

                    b.Navigation("IdsupplimentNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.DiseasePatient", b =>
                {
                    b.HasOne("diet_server_api.Models.Disease", "IddiseaseNavigation")
                        .WithMany("DiseasePatients")
                        .HasForeignKey("Iddisease")
                        .HasConstraintName("disease_patient_diseases")
                        .IsRequired();

                    b.HasOne("diet_server_api.Models.Patient", "IdpatientNavigation")
                        .WithMany("DiseasePatients")
                        .HasForeignKey("Idpatient")
                        .HasConstraintName("disease_patient_patient")
                        .IsRequired();

                    b.Navigation("IddiseaseNavigation");

                    b.Navigation("IdpatientNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Doctor", b =>
                {
                    b.HasOne("diet_server_api.Models.User", "IduserNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("diet_server_api.Models.Doctor", "Iduser")
                        .HasConstraintName("table_8_user")
                        .IsRequired();

                    b.Navigation("IduserNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Individualrecipe", b =>
                {
                    b.HasOne("diet_server_api.Models.Mealtake", "IdmealtakeNavigation")
                        .WithMany("Individualrecipes")
                        .HasForeignKey("Idmealtake")
                        .HasConstraintName("individualrecipe_mealtake")
                        .IsRequired();

                    b.HasOne("diet_server_api.Models.Recipe", "IdrecipeNavigation")
                        .WithMany("Individualrecipes")
                        .HasForeignKey("Idrecipe")
                        .HasConstraintName("indvidualrecipe_recipe")
                        .IsRequired();

                    b.Navigation("IdmealtakeNavigation");

                    b.Navigation("IdrecipeNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Mealsbeforediet", b =>
                {
                    b.HasOne("diet_server_api.Models.Questionnaire", "IdquestionaryNavigation")
                        .WithMany("Mealsbeforediets")
                        .HasForeignKey("Idquestionary")
                        .HasConstraintName("mealseat_pendinguser")
                        .IsRequired();

                    b.Navigation("IdquestionaryNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Mealtake", b =>
                {
                    b.HasOne("diet_server_api.Models.Day", "IddayNavigation")
                        .WithMany("Mealtakes")
                        .HasForeignKey("Idday")
                        .HasConstraintName("mealtake_day")
                        .IsRequired();

                    b.Navigation("IddayNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Measurement", b =>
                {
                    b.HasOne("diet_server_api.Models.Patient", "IdpatientNavigation")
                        .WithMany("Measurements")
                        .HasForeignKey("Idpatient")
                        .HasConstraintName("measurements_patient")
                        .IsRequired();

                    b.Navigation("IdpatientNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Note", b =>
                {
                    b.HasOne("diet_server_api.Models.Doctor", "IddoctorNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("Iddoctor")
                        .HasConstraintName("note_doctor")
                        .IsRequired();

                    b.HasOne("diet_server_api.Models.Patient", "IdpatientNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("Idpatient")
                        .HasConstraintName("note_patient")
                        .IsRequired();

                    b.Navigation("IddoctorNavigation");

                    b.Navigation("IdpatientNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Patient", b =>
                {
                    b.HasOne("diet_server_api.Models.User", "IduserNavigation")
                        .WithOne("Patient")
                        .HasForeignKey("diet_server_api.Models.Patient", "Iduser")
                        .HasConstraintName("patient_user")
                        .IsRequired();

                    b.Navigation("IduserNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.ProductParameter", b =>
                {
                    b.HasOne("diet_server_api.Models.Parameter", "IdparameterNavigation")
                        .WithMany("ProductParameters")
                        .HasForeignKey("Idparameter")
                        .HasConstraintName("product_parameter_parameter")
                        .IsRequired();

                    b.HasOne("diet_server_api.Models.Product", "IdproductNavigation")
                        .WithMany("ProductParameters")
                        .HasForeignKey("Idproduct")
                        .HasConstraintName("product_parameter_products")
                        .IsRequired();

                    b.Navigation("IdparameterNavigation");

                    b.Navigation("IdproductNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Questionnaire", b =>
                {
                    b.HasOne("diet_server_api.Models.Patient", "IdpatientNavigation")
                        .WithMany("Questionnaires")
                        .HasForeignKey("Idpatient")
                        .HasConstraintName("questionary_patient")
                        .IsRequired();

                    b.Navigation("IdpatientNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Recipe", b =>
                {
                    b.HasOne("diet_server_api.Models.Meal", "IdmealNavigation")
                        .WithMany("Recipes")
                        .HasForeignKey("Idmeal")
                        .HasConstraintName("recipe_meals")
                        .IsRequired();

                    b.HasOne("diet_server_api.Models.Product", "IdproductNavigation")
                        .WithMany("Recipes")
                        .HasForeignKey("Idproduct")
                        .HasConstraintName("recipe_products")
                        .IsRequired();

                    b.Navigation("IdmealNavigation");

                    b.Navigation("IdproductNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Visit", b =>
                {
                    b.HasOne("diet_server_api.Models.Doctor", "IddoctorNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("Iddoctor")
                        .HasConstraintName("visit_doctor")
                        .IsRequired();

                    b.HasOne("diet_server_api.Models.Patient", "IdpatientNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("Idpatient")
                        .HasConstraintName("visit_patient")
                        .IsRequired();

                    b.Navigation("IddoctorNavigation");

                    b.Navigation("IdpatientNavigation");
                });

            modelBuilder.Entity("diet_server_api.Models.Day", b =>
                {
                    b.Navigation("Mealtakes");
                });

            modelBuilder.Entity("diet_server_api.Models.Diet", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Dietsuppliments");
                });

            modelBuilder.Entity("diet_server_api.Models.Disease", b =>
                {
                    b.Navigation("DiseasePatients");
                });

            modelBuilder.Entity("diet_server_api.Models.Doctor", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("diet_server_api.Models.Meal", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("diet_server_api.Models.Mealtake", b =>
                {
                    b.Navigation("Individualrecipes");
                });

            modelBuilder.Entity("diet_server_api.Models.Parameter", b =>
                {
                    b.Navigation("ProductParameters");
                });

            modelBuilder.Entity("diet_server_api.Models.Patient", b =>
                {
                    b.Navigation("Diets");

                    b.Navigation("DiseasePatients");

                    b.Navigation("Measurements");

                    b.Navigation("Notes");

                    b.Navigation("Questionnaires");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("diet_server_api.Models.Product", b =>
                {
                    b.Navigation("ProductParameters");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("diet_server_api.Models.Questionnaire", b =>
                {
                    b.Navigation("Mealsbeforediets");
                });

            modelBuilder.Entity("diet_server_api.Models.Recipe", b =>
                {
                    b.Navigation("Individualrecipes");
                });

            modelBuilder.Entity("diet_server_api.Models.Supplement", b =>
                {
                    b.Navigation("Dietsuppliments");
                });

            modelBuilder.Entity("diet_server_api.Models.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
